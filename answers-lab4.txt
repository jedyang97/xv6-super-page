Challenge Question:
Challenge! Implement a shared-memory fork() called sfork(). This version should have the parent and child share all their memory pages (so writes in one environment appear in the other) except for pages in the stack area, which should be treated in the usual copy-on-write manner. Modify user/forktree.c to use sfork() instead of regular fork(). Also, once you have finished implementing IPC in part C, use your sfork() to run user/pingpongs. You will have to find a new way to provide the functionality of the global thisenv pointer.

Answer:

To implement this functionality, we first add a sduppage() in lib/fork.c to mark a page as writable so that it becoms shared memory for the paren and child environment:

// helper function for sfork()
static int
sduppage(envid_t envid, unsigned pn)
{
  sys_page_map(0, PGADDR(0, pn, 0),
                   envid, PGADDR(0, pn, 0),
                   (((uvpt[pn] & PTE_SYSCALL))));
  return 0;
}

Then we need to implement sfork(), which is very similar to fork() except it uses sduppage() instead of duppage() for all environment memory other than the user stack:

// Challenge!
int
sfork(void)
{
  set_pgfault_handler(pgfault);
  envid_t envid = sys_exofork();
  if (envid == 0) {
    set_pgfault_handler(pgfault);
    return 0;
  }
  if (envid < 0) {
    panic("sfork: sys_exofork failed for env %e", envid);
  }

  uint32_t addr;
  // shared memory
  for (addr = 0; addr < USTACKTOP - PGSIZE; addr += PGSIZE) {
    if ((uvpd[PDX(addr)] & PTE_P) && (uvpt[PGNUM(addr)] & PTE_P) &&
            (uvpt[PGNUM(addr)] & PTE_U)) {
        sduppage(envid, PGNUM(addr));
    }
  }
  // normal copy-on-write mapping
  for (; addr < USTACKTOP - PGSIZE; addr += PGSIZE) {
    if ((uvpd[PDX(addr)] & PTE_P) && (uvpt[PGNUM(addr)] & PTE_P) &&
            (uvpt[PGNUM(addr)] & PTE_U)) {
        duppage(envid, PGNUM(addr));
    }
  }

  // allocate user exception stack, this can't be shared with parent
  if (sys_page_alloc(envid, (void *)(UXSTACKTOP-PGSIZE), PTE_U|PTE_W|PTE_P) < 0) {
      panic("fork: sys_page_alloc failed when allocating page for user exception stack");
  }
  extern void _pgfault_upcall();
  sys_env_set_pgfault_upcall(envid, _pgfault_upcall);
  sys_env_set_status(envid, ENV_RUNNABLE);

  return envid;
}

Lastly, we will need to use a macro in lib/libmain.c as the new way of accessing thisenv pointer:

#define thisenv (&envs[ENVX(sys_getenvid())])

Questions:

1. Compare kern/mpentry.S side by side with boot/boot.S. Bearing in mind that kern/mpentry.S is compiled and linked to run above KERNBASE just like everything else in the kernel, what is the purpose of macro MPBOOTPHYS? Why is it necessary in kern/mpentry.S but not in boot/boot.S? In other words, what could go wrong if it were omitted in kern/mpentry.S? Hint: recall the differences between the link address and the load address that we have discussed in Lab 1.

Answer:
Both boot/boot.S and kern/mpentry.S needs the symbols in its assembly to be physical address because paging is not set up yet when a processor boots.

#define MPBOOTPHYS(s) ((s) - mpentry_start + MPENTRY_PADDR)
This macro coverts the linked address (the address above KERNBASE) of a symbol, to the physical address that the symbol will be loaded to. The conversion is neccessary for kern/mpentry.S because these code are linked above KERNBASE while executed at MPENTRY_PADDR. In other words, without this conversion, the remaining processors will try to access a symbol that resides above KERNBASE, which is impossible and incorrect. This conversion is not neccessary for boot/boot.S becasue it is both linked and executed at physical address 0x7c00.

2. It seems that using the big kernel lock guarantees that only one CPU can run the kernel code at a time. Why do we still need separate kernel stacks for each CPU? Describe a scenario in which using a shared kernel stack will go wrong, even with the protection of the big kernel lock.

Answer:
When handling interrupts, we push part of the trapframe before we acquire the lock. If we only had one shared kernel stack, the stack would be clobbered by simultaneous writes from multiple CPUs.

3. In your implementation of env_run() you should have called lcr3(). Before and after the call to lcr3(), your code makes references (at least it should) to the variable e, the argument to env_run. Upon loading the %cr3 register, the addressing context used by the MMU is instantly changed. But a virtual address (namely e) has meaning relative to a given address context–the address context specifies the physical address to which the virtual address maps. Why can the pointer e be dereferenced both before and after the addressing switch?

Answer:
Variable e is in the kernel part of VM. Kernel part of the VM is mapped identically across all environment.

4. Whenever the kernel switches from one environment to another, it must ensure the old environment’s registers are saved so they can be restored properly later. Why? Where does this happen?

Answer:
The trap frame of each environment stores the old values of registers. This is done in trap.c.

